# -*- python -*-
# ex: set filetype=python:

from future.utils import iteritems
from future.utils import string_types
from buildbot.process.build import Build
from buildbot.plugins import *
from buildbot import locks
from twisted.python import log
from twisted.internet import defer
import buildbot
import subprocess, re, json
import os.path
from buildbot.steps.worker import CompositeStepMixin

import utils
import builds

f = open('config.json', 'r')
config = utils.json_to_ascii(json.loads(f.read ()))

def getConfig(name, default=""):
    return config.get(name, default)

def getConfigv(name, default=[]):
    return config.get(name, default)

flathub_buildbot_port = getConfig('buildbot-port', 8010)
flathub_num_master_workers = getConfig('num-master-workers', 4)
flathub_buildbot_uri = getConfig('buildbot-uri')
flathub_upstream_repo = getConfig('flathub-repo')
flathub_upstream_repo_path = getConfig('flathub-repo-path')
flathub_branch = getConfig('flathub-branch')
flathub_gpg_homedir = getConfig('flathub-gpg-homedir')
flathub_gpg_key = getConfig('flathub-gpg-key')
flathub_admin_password = getConfig('admin-password')
flathub_github_auth_client = getConfig('github-auth-client')
flathub_github_auth_secret = getConfig('github-auth-secret')
flathub_github_change_secret = getConfig('github-change-secret')
flathub_github_status_token = getConfig('github-status-token')

# Tracks the last build number that was used to update the repo for a particular build-id
# So we avoid going backwards if the builds finish in the wrong order
flathub_build_latest_update = {}

f = open('builders.json', 'r')
worker_config = utils.json_to_ascii(json.loads(f.read ()))

###### Init

c = BuildmasterConfig = {}
c['change_source'] = []
c['protocols'] = {}

####### Authentication

auth = None
roleMatchers=[]
adminsRole="admins"

if flathub_admin_password != '':
    auth = util.UserPasswordAuth({"admin": flathub_admin_password})
    roleMatchers.append(util.RolesFromEmails(admins=["admin"]))

if flathub_github_auth_client != '':
    auth = util.GitHubAuth(flathub_github_auth_client, flathub_github_auth_secret)
    roleMatchers.append(util.RolesFromGroups())
    adminsRole = 'flathub'

authz = util.Authz(
    allowRules=[
        util.RebuildBuildEndpointMatcher(role=adminsRole, defaultDeny=True),
        util.StopBuildEndpointMatcher(role=adminsRole, defaultDeny=True),
        util.ForceBuildEndpointMatcher(role=adminsRole, defaultDeny=True),
        util.EnableSchedulerEndpointMatcher(role=adminsRole, defaultDeny=True)
    ],
    roleMatchers=roleMatchers
)

c['protocols']['pb'] = {'port': 9989}

####### SETUP

flathub_arches = []
flathub_arch_workers = {}
flathub_update_workers = []

gpg_args = []
if flathub_gpg_key:
    gpg_args.append ('--gpg-sign=' + flathub_gpg_key)
if flathub_gpg_homedir:
    gpg_args.append ('--gpg-homedir=' + flathub_gpg_homedir)

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# For whatever reason, max-builds doesn't seem to work, so we only ever run one build.
# To hack around this we create multiple master workers
local_workers = []
for i in range(1,flathub_num_master_workers+1):
    name = 'MasterWorker%d' % i
    c['workers'].append (worker.LocalWorker(name))
    local_workers.append(name)

for w in worker_config.iterkeys():
    wc = worker_config[w]
    passwd = wc['password']
    max_builds = None
    if wc.has_key('max-builds'):
        max_builds = wc['max-builds']
    c['workers'].append (worker.Worker(w, passwd, max_builds=max_builds))
    if wc.has_key('arches'):
        for a in wc['arches']:
            if not a in flathub_arches:
                flathub_arches.append(a)
                flathub_arch_workers[a] = []
            flathub_arch_workers[a].append(w)
    if wc.has_key('update-repo'):
        flathub_update_workers.append(w)


def change_is_official(change):
    try:
        info = builds.lookup_by_git(change.repository, change.branch)
        if info:
            return info.official
    except:
        pass
    return False

####### SCHEDULERS
checkin = schedulers.AnyBranchScheduler(name="checkin",
                                        treeStableTimer=10,
                                        change_filter=util.ChangeFilter(filter_fn=change_is_official),
                                        builderNames=["Build App"])
build = schedulers.Triggerable(name="build-all-platforms",
                               builderNames=map(lambda x: "build-" + x, flathub_arches))
update_repo = schedulers.Triggerable(name="update-repo",
                                     builderNames=["update-repo"])

class AppParameter(util.CodebaseParameter):

    """A parameter whose result is a codebase specification instead of a property"""
    type = util.CodebaseParameter.type
    codebase = ''

    def __init__(self,
                 codebase,
                 name=None,
                 label=None,
                 **kwargs):

        util.CodebaseParameter.__init__(self, name=name, label=label,
                                        codebase=codebase,
                                        branch=util.StringParameter(name="branch", label='branch:', default=""),
                                        revision=util.FixedParameter(name="revision", default=""),
                                        repository=util.StringParameter(name="repository", label='repo uri:', default=""),
                                        project=util.FixedParameter(name="project", default=""),
                                        **kwargs)

    def createSourcestamp(self, properties, kwargs):
        cb = kwargs.get(self.fullName, [])
        branch = cb['branch']
        buildname = kwargs.get('buildname', None)[0]
        repo_uri = cb['repository']
        if repo_uri:
            if '/' in buildname:
                raise Exception("Can't specify non-empty version and custom git repo at the same time.")
            # Here, buildname is now always just an id
            data = builds.lookup_by_git(repo_uri, branch if branch else "master", buildname)
            # If we specified a custom git uri then the git module name might not be the
            # app id, so in this case we need to remember the actual app id that
            # the user specified
            if buildname:
                project = 'forced-build-id/%s' % data.id
            else:
                project = 'flathub/' + data.id
        elif buildname:
            data = builds.lookup_by_name(buildname)
            project = 'flathub/' + data.id
            if branch:
                data.git_branch = branch
                # We're overriding the branch, so we loose officialness
                data.official = False
        else:
            raise Exception("Must specify either repo uri or buildname")

        return {'project': project,
                'repository': data.url,
                'revision': '',
                'branch': data.git_branch}

force = schedulers.ForceScheduler(
    name="force",
    buttonName="Force Rebuild",
    label="Force a rebuild",
    builderNames=["Build App"],

    codebases=[
        AppParameter(
            "",
            name="Main repository",
        ),
    ],
    reason=util.StringParameter(name="reason",
                                label="reason:",
                                required=True, default="force build", size=80),
    properties=[
        util.StringParameter(name="buildname",
                             label="Buildname:",
                             required=False)
    ]
)

c['schedulers'] = [checkin, build, update_repo, force]
c['collapseRequests'] = False

####### Custom builders

# We create one worker lock per build-id, which is the same as the workdir
# so multiple builds never work in the same workdir on any particular worker
class BuildIDLockBuild(Build):
    _workerLocks = {}

    @staticmethod
    def find_or_create_master_lock_for_buildid(buildid):
        lock = BuildIDLockBuild._workerLocks.get(buildid)
        if lock is None:
            log.msg("********* Created lock for buildid %s" % buildid)
            lock = locks.WorkerLock(buildid + ' buildid lock')
            BuildIDLockBuild._workerLocks[buildid] = lock
        return lock

    def startBuild(self, build_status, workerforbuilder):
        buildid = self.getProperty('flathub-build-id')
        lock = BuildIDLockBuild.find_or_create_master_lock_for_buildid(buildid)
        self.setLocks([lock.access('exclusive')])
        return Build.startBuild(self, build_status, workerforbuilder)

####### BUILDERS

def hide_on_success(results, s):
    return results==buildbot.process.results.SUCCESS

def hide_on_skipped(results, s):
    return results==buildbot.process.results.SKIPPED

def hide_on_success_or_skipped(results, s):
    return results==buildbot.process.results.SUCCESS or results==buildbot.process.results.SKIPPED

# Official builds are master branch on the canonical flathub git repo
def BuildIsOfficial(step):
    return step.build.getProperty ('flathub-official-build', False)

def ShouldBuildArch(build):
    arch = build.getProperty ('flathub-arch', '')
    config = build.getProperty ('flathub-config', {})

    if config.has_key("skip-arches"):
        if arch in config["skip-arches"]:
            return False

    if config.has_key("only-arches"):
        if arch not in config["only-arches"]:
            return False

    return True

flatpak_update_lock = util.WorkerLock("flatpak-update")
repo_lock = util.MasterLock("repo")

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

class ReadConfigStep(steps.BuildStep, CompositeStepMixin):
    def __init__(self, **kwargs):
        steps.BuildStep.__init__(self, **kwargs)

    @defer.inlineCallbacks
    def run(self):
        flathub_config = {}
        content = yield self.getFileContentFromWorker("flathub.json")
        if content != None:
            flathub_config = json.loads(content)
        self.setProperty("flathub-config", flathub_config, "flathub.json")
        defer.returnValue(buildbot.process.results.SUCCESS)


class MaybeAddSteps(steps.BuildStep):
    parms = steps.BuildStep.parms + ['steps']
    steps = None
    predicate = None

    def __init__(self, predicate, **kwargs):
        for p in self.__class__.parms:
            if p in kwargs:
                setattr(self, p, kwargs.pop(p))

        steps.BuildStep.__init__(self, **kwargs)
        self.predicate = predicate

    def run(self):
        if self.predicate(self.build):
            self.build.addStepsAfterCurrentStep(self.steps)
        return buildbot.process.results.SUCCESS

def shellArg(commands):
    return util.ShellArg(logfile='stdio', command=commands)

def create_build_factory():
    build_factory = util.BuildFactory()
    build_factory.buildClass = BuildIDLockBuild
    build_factory.workdir = util.Property('flathub-build-id')
    build_factory.addSteps([
        steps.Git(name="checkout manifest",
                  repourl=util.Property('repository'),
                  mode='incremental', branch='master', submodules=True),
        ReadConfigStep(name="Read config"),
        MaybeAddSteps(
            ShouldBuildArch,
            name="Should we build",
            steps=[
                steps.FileDownload(name='downloading public key',
                                   hideStepIf=hide_on_success,
                                   mastersrc="flathub.gpg",
                                   workerdest="flathub.gpg"),
                steps.ShellSequence(
                    name='Prepare for build',
                    haltOnFailure=True,
                    logEnviron=False,
                    commands=[
                        shellArg(['mkdir', '-p', 'repo/screenshots']),
                        shellArg(['rm', '-rf', 'parent-repo', 'repo', 'repo.tar']),
                        shellArg(['ostree', '--repo=repo', '--mode=archive-z2', 'init']),
                        # Add flathub remote
                        util.ShellArg(logfile='stdio',  haltOnFailure=True,
                                      command=['flatpak', '--user', 'remote-add', '--if-not-exists', '--gpg-import=flathub.gpg',
                                               'flathub', flathub_upstream_repo]),
                        # Update flathub remote url
                        util.ShellArg(logfile='stdio', haltOnFailure=True,
                                      command=['flatpak', '--user', 'remote-modify', '--url='+ flathub_upstream_repo,
                                               'flathub']),
                        # Clean up rofiles-fuse
                        util.ShellArg(logfile='stdio', haltOnFailure=True,
                                      command='for i in .flatpak-builder/rofiles/rofiles-*/; do fusermount -u $i; done || true')
                    ]),
                steps.ShellCommand(
                    name='Build',
                    haltOnFailure=True,
                    logEnviron=False,
                    command=['flatpak-builder', '-v', '--force-clean', '--sandbox', '--delete-build-dirs',
                             '--user', '--install-deps-from=flathub',
                             util.Property('extra-fb-args'), '--mirror-screenshots-url=https://flathub.org/repo/screenshots', '--repo', 'repo',
                             '--default-branch', flathub_branch,
                             '--subject', util.Interpolate('Build %(prop:flathub-id)s at %(prop:revision)s'),
                             'builddir', util.Interpolate('%(prop:flathub-manifest)s')]),
                steps.ShellCommand(
                    name='Check for AppStream xml',
                    doStepIf=lambda step: not step.build.getProperty('flathub-config', {}).get("skip-appstream-check"),
                    haltOnFailure=True,
                    logEnviron=False,
                    command=util.Interpolate('stat builddir/*/share/app-info/xmls/%(prop:flathub-id)s.xml.gz')),
                steps.ShellCommand(
                    name='Check that the right branch was built',
                    haltOnFailure=True,
                    command=util.Interpolate('test ! -d repo/refs/heads/app -o -f repo/refs/heads/app/%(prop:flathub-id)s/%(prop:flathub-arch)s/' + flathub_branch)),
                steps.ShellSequence(
                    name='Post-build work',
                    logEnviron=False,
                    commands=[
                        # Copy screenshots
                        shellArg(['cp', '-r', 'builddir/screenshots', 'repo/'])
                    ])
                ]),
        steps.ShellCommand(name='packaging result',
                           haltOnFailure=True,
                           doStepIf=BuildIsOfficial,
                           hideStepIf=hide_on_skipped,
                           logEnviron=False,
                           command=['tar', 'cf', 'repo.tar', 'repo']),
        steps.FileUpload(workersrc='repo.tar',
                         haltOnFailure=True,
                         doStepIf=BuildIsOfficial,
                         hideStepIf=hide_on_skipped,
                         masterdest=util.Interpolate('%(prop:flathub-artifact-dir)s/%(prop:flathub-arch)s-repo.tar'),
                         blocksize=64*1024),
        steps.ShellCommand(name='clean up',
                           alwaysRun=True,
                           logEnviron=False,
                           command=['rm', '-rf', '.flatpak-builder/build', 'builddir', 'repo', 'repo.tar'])
    ])
    return build_factory

update_repo_factory = util.BuildFactory()
update_repo_factory.addStep(steps.ShellCommand(name='clean old repo',
                                               logEnviron=False,
                                               command=['rm', '-rf', 'repo', 'import-repo']))
for arch in flathub_arches:
    update_repo_factory.addStep(steps.FileDownload(name='download ' + arch + ' build result',
                                                   mastersrc=util.Interpolate('%(prop:flathub-artifact-dir)s/'+arch+'-repo.tar'),
                                                   workerdest=arch+'-repo.tar',
                                                   blocksize=64*1024))
extract_commands = []
for arch in flathub_arches:
    extract_commands.append(shellArg(['tar', 'xf', arch+'-repo.tar']))
    extract_commands.append(shellArg(['rm', arch+'-repo.tar']))

update_repo_factory.addStep(steps.ShellSequence(name='Extract build results',
                                                logEnviron=False,
                                                commands=extract_commands))

update_repo_factory.addSteps([
    steps.MasterShellCommand(name='remove build results from master',
                             command=['rm', '-rf', util.Interpolate('%(prop:flathub-artifact-dir)s')],
                             alwaysRun=True),
    steps.ShellSequence(name='Check and prepare repo',
                        logEnviron=False,
                        commands=[
        # Fsck repo we got from builders
        shellArg(['ostree', '--repo=repo', 'fsck']),
        # Create new repo we will import from
        shellArg(['ostree', '--repo=import-repo', '--mode=archive-z2', 'init']),
        shellArg(['ostree', '--repo=import-repo', 'config', 'set', 'core.parent', flathub_upstream_repo_path]),
        # Create signed commits in the import repo
        shellArg(['flatpak', 'build-commit-from', '--src-repo=repo', '--no-update-summary'] + gpg_args + ["import-repo"]),
        # Ensure files are readable
        shellArg(['chmod', '-R', 'a+rX', 'import-repo'])
                            ]),
    steps.ShellSequence(name='Merge to main repo',
                        logEnviron=False,
                        locks=[repo_lock.access('exclusive')],
                        commands=[
        # rsync objects and deltas
        shellArg(['rsync', '-rltv', '--ignore-existing',
                  '--include=/screenshots',
                  '--include=/screenshots/**',
                  '--include=/objects',
                  '--include=/objects/**',
                  '--include=/deltas',
                  '--include=/deltas/**',
                  '--exclude=*',
                  'import-repo/', flathub_upstream_repo_path + '/']),
        shellArg(['sync']),
        # rsync refs, after objects are synced
        shellArg(['rsync', '-rltv',
                  '--include=/refs',
                  '--include=/refs/heads',
                  '--include=/refs/heads/app',
                  '--include=/refs/heads/app/**',
                  '--include=/refs/heads/runtime',
                  '--include=/refs/heads/runtime/**',
                  '--exclude=*',
                  'import-repo/', flathub_upstream_repo_path + '/'])
                        ]),
    steps.ShellCommand(name='Update the repo and generate deltas',
                       logEnviron=False,
                       command=['flatpak', 'build-update-repo', '--generate-static-deltas'] + gpg_args + [flathub_upstream_repo_path],
                       locks=[repo_lock.access('exclusive')]),
    steps.ShellCommand(name='clean up',
                       logEnviron=False,
                       command=['rm', '-rf', 'repo', 'import-repo'])
    ])

def asciiBasename(s):
    return os.path.basename(s).encode('ascii', 'ignore')

@util.renderer
def computeBuildProperties(props):
    buildnumber = props.getProperty('buildnumber')
    orig_reason = props.getProperty('reason')
    repository = props.getProperty('repository')
    branch = props.getProperty('branch')
    project = props.getProperty('project')
    # When you force a build you can get a different app id than the repo module,
    # we have to save the specified id in the sourcestamps so we can pull it
    # back out here, so we
    forced_id = None
    if project.startswith("forced-build-id/"):
        forced_id = project[len("forced-build-id/"):]
    data = builds.lookup_by_git(repository, branch, forced_id)
    if data.fp_branch:
        buildid = "%s@%s" % (data.id, data.fp_branch)
        builddesc = "%s %s" % (data.id, data.fp_branch)
    else:
        buildid = data.id
        builddesc = data.id

    return {
        "flathub-id": data.id,
        "flathub-build-id": buildid,
        "flathub-buildnumber": buildnumber,
        "flathub-manifest": data.get_manifest(),
        "flathub-branch": data.fp_branch,
        "flathub-official-build": data.official,
        "flathub-artifact-dir": "builds/%s-%s" % (buildid, buildnumber),
        "reason": builddesc,
        "orig-reason": orig_reason
    }

def ShouldUpdateRepo(step):
    if not BuildIsOfficial(step):
        return False
    buildid = step.build.getProperty ('flathub-build-id', "")
    buildnumber = step.build.getProperty ('flathub-buildnumber', 0)
    last_update = flathub_build_latest_update.get(buildid, 0)
    if buildnumber >= last_update:
        flathub_build_latest_update[buildid] = buildnumber
        return True
    return False

build_app_factory = util.BuildFactory()
build_app_factory.addSteps([
    steps.SetProperties(name="Set flathub properties",
                        hideStepIf=hide_on_success,
                        properties=computeBuildProperties),
    steps.Trigger(name='Build all platforms',
                  haltOnFailure=True,
                  schedulerNames=['build-all-platforms'],
                  updateSourceStamp=True,
                  waitForFinish=True,
                  set_properties={
                      'flathub-id' : util.Property('flathub-id'),
                      'flathub-build-id' : util.Property('flathub-build-id'),
                      'flathub-buildnumber' : util.Property('flathub-buildnumber'),
                      'flathub-artifact-dir' : util.Property('flathub-artifact-dir'),
                      'flathub-manifest' : util.Property('flathub-manifest'),
                      'flathub-branch' : util.Property('flathub-branch'),
                      'flathub-official-build' : util.Property('flathub-official-build'),
                      'reason' : util.Property('reason')
                  }),
    steps.Trigger(name='Update repository',
                  haltOnFailure=True,
                  doStepIf=ShouldUpdateRepo,
                  hideStepIf=hide_on_skipped,
                  schedulerNames=['update-repo'],
                  updateSourceStamp=True,
                  waitForFinish=True,
                  set_properties={
                      'flathub-id' : util.Property('flathub-id'),
                      'flathub-build-id' : util.Property('flathub-build-id'),
                      'flathub-buildnumber' : util.Property('flathub-buildnumber'),
                      'flathub-artifact-dir' : util.Property('flathub-artifact-dir'),
                      'flathub-manifest' : util.Property('flathub-manifest'),
                      'flathub-branch' : util.Property('flathub-branch'),
                      'flathub-official-build' : util.Property('flathub-official-build'),
                      'reason' : util.Property('reason')
                  }),
    steps.MasterShellCommand(name="Clean up storage on master",
                             alwaysRun=True,
                             hideStepIf=hide_on_success_or_skipped,
                             doStepIf=BuildIsOfficial,
                             haltOnFailure=True,
                             command=['rm', '-rf', util.Interpolate('%(prop:flathub-artifact-dir)s')])
])

c['builders'] = []

status_builders = []

build_factory = create_build_factory()

for arch in flathub_arches:
    extra_fb_args = ['--arch', arch]
    if arch == 'x86_64':
        extra_fb_args = extra_fb_args + ['--bundle-sources']

    c['builders'].append(
        util.BuilderConfig(name='build-' + arch,
                           workernames=flathub_arch_workers[arch],
                           properties={'flathub-arch': arch, 'extra-fb-args': extra_fb_args },
                           factory=build_factory))
    status_builders.append('build-' + arch)
c['builders'].append(
    util.BuilderConfig(name='update-repo',
                       workernames=flathub_update_workers,
                       factory=update_repo_factory))
status_builders.append('update-repo')
c['builders'].append(
    util.BuilderConfig(name='Build App',
                       collapseRequests=True,
                       workernames=local_workers,
                       factory=build_app_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

if flathub_github_status_token != '':
    c['services'].append(reporters.GitHubStatusPush(token=flathub_github_status_token,
                                                    context=util.Interpolate("buildbot/%(prop:buildername)s"),
                                                    startDescription='Build started.',
                                                    endDescription='Build done.',
                                                    builders=status_builders))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Flathub'
c['titleURL'] = 'https://github.com/flatpak/flathub'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = flathub_buildbot_uri

c['www'] = dict(port=flathub_buildbot_port,
                plugins=dict(waterfall_view={}, console_view={}),
                authz=authz)
if auth:
    c['www']['auth'] = auth

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

if flathub_github_change_secret != "":
    c['www']['change_hook_dialects'] = {
        'github': {
            'secret': flathub_github_change_secret,
            'strict': True
        }
    }

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
