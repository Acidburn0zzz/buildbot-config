# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import subprocess, re, json

f = open('workers.json', 'r')
workers_json = f.read ()
workers = json.loads(workers_json)
print workers

flathub_github_uri = 'git://github.com/alexlarsson/flathub.git'
flathub_upstream_repo = 'file:///vcs/gnome/flathub/repo'
flathub_upstream_repo_path = '/vcs/gnome/flathub/repo'
flathub_branch = 'stable'
flathub_arches = ["x86_64", "i386"]
flathub_arch_workers = {
    "x86_64": ['flathub-worker'],
    "i386":  ['flathub-worker']
}
flathub_checkin_workers = ['flathub-worker']
flathub_update_worker = 'flathub-worker'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("flathub-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    flathub_github_uri,
    workdir='gitpoller-workdir', branches=True,
    pollinterval=300))
from buildbot.changes import pb
c['change_source'].append(pb.PBChangeSource(port=9999, user='change', passwd='test'))


####### SCHEDULERS

checkin = schedulers.AnyBranchScheduler(name="checkin",
                                        treeStableTimer=None,
                                        builderNames=["checkin"])
build = schedulers.Triggerable(name="build-all-platforms",
                               builderNames=map(lambda x: "build-" + x, flathub_arches))
update_repo = schedulers.Triggerable(name="update-repo",
                                     builderNames=["update-repo"])

force = schedulers.ForceScheduler(
    name="force",
    buttonName="Rebuild",
    label="Force a rebuild",
    builderNames=["checkin"],

    codebases=[
        util.CodebaseParameter(
            "",
            name="Main repository",
            branch=util.StringParameter(name="branch",
                                        label="app:",
                                        required=True),
            revision=util.FixedParameter(name="revision", default=""),
            repository=util.FixedParameter(name="repository", default=""),
            project=util.FixedParameter(name="project", default=""),
        ),
    ],
    reason=util.StringParameter(name="reason",
                                label="reason:",
                                required=True, size=80)
)

c['schedulers'] = [checkin, build, update_repo, force]

####### BUILDERS

repo_lock = util.MasterLock("repo")

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

build_factory = util.BuildFactory()
build_factory.workdir = util.Interpolate('build-%(prop:branch)s')
build_factory.addStep(steps.Git(name="checkout manifest",
                                repourl=flathub_github_uri,
                                mode='incremental', branch=util.Property('branch')))
build_factory.addStep(steps.ShellSequence(name='initializing repos',
                                          haltOnFailure=True,
                                          commands=[
                                              util.ShellArg(command=['rm', '-rf', 'parent-repo', 'repo', 'repo.tar']),
                                              util.ShellArg(command=['ostree', '--repo=parent-repo', '--mode=archive-z2', 'init']),
                                              util.ShellArg(command=['ostree', '--repo=parent-repo', 'remote', 'add', '--no-gpg-verify', 'upstream', flathub_upstream_repo]),
                                              util.ShellArg(command=['ostree', '--repo=repo', '--mode=archive-z2', 'init'])
                                          ]))
build_factory.addStep(steps.ShellCommand(name='set core.parent',
                                         command=['ostree', '--repo=repo', 'config', 'set', 'core.parent', util.Interpolate('%(prop:builddir)s/build-%(prop:branch)s/parent-repo')]))
build_factory.addStep(steps.ShellCommand(name='pull current revision into parent repo',
                                         flunkOnFailure=False, # TODO: Instead only do this if this is the first build
                                         command=['ostree', '--repo=parent-repo', 'pull', '--mirror', 'upstream',
                                                  util.Interpolate('app/%(prop:branch)s/%(prop:arch)s/' + flathub_branch),
                                                  util.Interpolate('runtime/%(prop:branch)s.Debug/%(prop:arch)s/' + flathub_branch),
                                                  util.Interpolate('runtime/%(prop:branch)s.Locale/%(prop:arch)s/' + flathub_branch)]))
build_factory.addStep(steps.ShellCommand(name='build manifest',
                                         haltOnFailure=True,
                                         command=['flatpak-builder', '--force-clean', '--sandbox',
                                                  '--arch', util.Property('arch'), '--repo', 'repo',
                                                  '--default-branch', flathub_branch,
                                                  '--subject', util.Interpolate('Build %(prop:branch)s at %(prop:revision)s'),
                                                  'builddir', util.Interpolate('%(prop:branch)s.json')]))
build_factory.addStep(steps.ShellCommand(name='check that the right branch was built',
                                         haltOnFailure=True,
                                         command=['stat', util.Interpolate('repo/refs/heads/app/%(prop:branch)s/%(prop:arch)s/' + flathub_branch)]))
build_factory.addStep(steps.ShellCommand(name='generating deltas',
                                         haltOnFailure=True,
                                         command=['flatpak', 'build-update-repo', '--generate-static-deltas', 'repo']))
build_factory.addStep(steps.ShellCommand(name='unset core.parent',
                                         command=['ostree', '--repo=repo', 'config', 'set', 'core.parent', '']))
build_factory.addStep(steps.ShellCommand(name='packaging result',
                                         haltOnFailure=True,
                                         command=['tar', 'cf', 'repo.tar', 'repo']))
build_factory.addStep(steps.FileUpload(workersrc='repo.tar',
                                       haltOnFailure=True,
                                       masterdest=util.Interpolate('builds/%(prop:branch)s-%(prop:revision)s/%(prop:arch)s-repo.tar'),
                                       blocksize=64*1024))
build_factory.addStep(steps.ShellCommand(name='clean up',
                                         alwaysRun=True,
                                         command=['rm', '-rf', '.flatpak-builder/build', 'builddir', 'repo', 'parent-repo']))

update_repo_factory = util.BuildFactory()
update_repo_factory.addStep(steps.ShellCommand(name='clean old repo', command=['rm', '-rf', 'repo']))
for arch in flathub_arches:
    update_repo_factory.addStep(steps.FileDownload(name='download ' + arch + ' build result',
                                                   mastersrc=util.Interpolate('builds/%(prop:branch)s-%(prop:revision)s/'+arch+'-repo.tar'),
                                                   workerdest=arch+'-repo.tar',
                                                   blocksize=64*1024))
    update_repo_factory.addStep(steps.ShellCommand(name='extract ' + arch + ' build result',
                                                   command=['tar', 'xf', arch+'-repo.tar']))
update_repo_factory.addStep(steps.MasterShellCommand(name='remove build results from master',
                                                     command=['rm', '-rf', util.Interpolate('builds/%(prop:branch)s-%(prop:revision)s')],
                                                     alwaysRun=True))
update_repo_factory.addStep(steps.ShellCommand(name='fsck results', command=['ostree', '--repo=repo', 'fsck']))
update_repo_factory.addStep(steps.ShellCommand(name='rsync objects and deltas',
                                               command=['rsync', '-rlptv', '--ignore-existing',
                                                        '--include=/objects',
                                                        '--include=/objects/**',
                                                        '--include=/deltas',
                                                        '--include=/deltas/**',
                                                        '--exclude=*',
                                                        'repo/', flathub_upstream_repo_path + '/']))
update_repo_factory.addStep(steps.ShellCommand(name='syncfs',
                                               command=['sync', '-f', flathub_upstream_repo_path]))
update_repo_factory.addStep(steps.ShellCommand(name='rsync refs',
                                               command=['rsync', '-rlptv',
                                                        '--include=/refs',
                                                        '--include=/refs/heads',
                                                        '--include=/refs/heads/app',
                                                        '--include=/refs/heads/app/**',
                                                        '--include=/refs/heads/runtime',
                                                        '--include=/refs/heads/runtime/**',
                                                        '--exclude=*',
                                                        'repo/', flathub_upstream_repo_path + '/'],
                                               locks=[repo_lock.access('exclusive')]))
update_repo_factory.addStep(steps.ShellCommand(name='update the repo',
                                               command=['flatpak', 'build-update-repo', '--generate-static-deltas', '/vcs/gnome/flathub/repo'],
                                               locks=[repo_lock.access('exclusive')]))

checkin_factory = util.BuildFactory()
checkin_factory.addStep(steps.MasterShellCommand(name="Clean up storage on master",
                                                 haltOnFailure=True,
                                                 command=['rm', '-rf', util.Interpolate('builds/%(prop:branch)s-%(prop:revision)s')]))
checkin_factory.addStep(steps.Trigger(name='Build all platforms',
                                      haltOnFailure=True,
                                      schedulerNames=['build-all-platforms'],
                                      updateSourceStamp=True,
                                      waitForFinish=True))
checkin_factory.addStep(steps.Trigger(name='Update repository',
                                      haltOnFailure=True,
                                      schedulerNames=['update-repo'],
                                      updateSourceStamp=True,
                                      waitForFinish=True))

c['builders'] = []

for arch in flathub_arches:
    c['builders'].append(
        util.BuilderConfig(name='build-' + arch,
                           workernames=flathub_arch_workers[arch],
                           properties={'arch': arch},
                           factory=build_factory))
c['builders'].append(
    util.BuilderConfig(name='update-repo',
                       workernames=[flathub_update_worker],
                       factory=update_repo_factory))
c['builders'].append(
    util.BuilderConfig(name='checkin',
                       workernames=flathub_checkin_workers,
                       factory=checkin_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'Flathub'
c['titleURL'] = 'https://github.com/flatpak/flathub'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
